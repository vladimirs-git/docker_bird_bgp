router id 10.0.0.4;
define LOCAL_AS = 65004;

protocol kernel {
  metric 0;
  import none;
  learn;
  export all;
}

protocol device {
}

protocol direct {
}

protocol static {
  route 0.0.0.0/0 drop;
  route 10.0.0.0/8 drop;
  route 172.16.0.0/12 drop;
  route 192.168.0.0/16 drop;
}

filter F_ROUTER1_OUT {
  if (net = 0.0.0.0/0) then {
    accept;
  }
  if (source = RTS_STATIC) then {
	  if (net = 10.0.0.0/8) then {
		bgp_path.prepend(LOCAL_AS);
		bgp_path.prepend(LOCAL_AS);
		accept;
	  }
	reject;
  }
  reject;
}

filter F_ROUTER2_OUT {
  if (net = 0.0.0.0/0) then {
    bgp_path.prepend(LOCAL_AS);
    bgp_path.prepend(LOCAL_AS);
    accept;
  }
  if (source = RTS_STATIC) then {
	  if (net = 10.0.0.0/8) then {
		bgp_community.add ((LOCAL_AS,2));
		accept;
	  }
	reject;
  }
  reject;
}

filter F_ROUTER3_OUT {
  if (net = 0.0.0.0/0) then {
    bgp_path.prepend(LOCAL_AS);
    bgp_path.prepend(LOCAL_AS);
    accept;
  }
  if (net = 10.0.0.0/8) && (source = RTS_STATIC) then {
    bgp_community.add ((LOCAL_AS,3));
	bgp_path.prepend(LOCAL_AS);
    accept;
  }
  reject;
}

template bgp T_AS65002 {
  local as LOCAL_AS;
  import all;
  export all;
}

protocol bgp router1 {
  local as LOCAL_AS;
  neighbor 10.1.4.101 as 65001;
  import all;
  export filter F_ROUTER1_OUT;
}

protocol bgp router2 from T_AS65002 {
  export filter F_ROUTER2_OUT;
  neighbor 10.2.4.102 as 65002;
}

protocol bgp router3 from T_AS65002 {
  export filter F_ROUTER3_OUT;
  neighbor 10.3.4.103 as 65002;
}
